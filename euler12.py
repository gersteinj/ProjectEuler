"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def calculate_triangle(number_to_calculate):
    """Geometry! Rearrange and double into rectangle, then halve to find target number"""
    area = number_to_calculate * (number_to_calculate + 1)
    result = int(area / 2)
    logging.debug("{} rows: {}".format(number_to_calculate, result))
    return result

def find_divisors(number):
    """might get weird for 1 or 2, and I don't feel like checking, since I'm starting at 500 anyway
       Originally there were checks to see if 1 or the actual number were repeated, but I want to go faster"""
    divisors = [1]
    for n in range(2, number//2 + 1):
        if number % n == 0:
            divisors.append(n)
    divisors.append(number)
    logging.debug(divisors)
    return divisors

starting_number = 500
most_divisible = 1

while most_divisible <= 500:
    tri = calculate_triangle(starting_number)
    div = len(find_divisors(tri))
    if div > most_divisible:
        logging.info("Found a new most divisible triangle! {} has {} divisors".format(tri, div))
        most_divisible = div
    starting_number += 1